{
  "swagger": "2.0",
  "info": {
    "description": "Reddit Clone Backend endpoints",
    "version": "1.0.0",
    "title": "Reddit Clone",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "../reddit-clone-Jmukakalisa/SwaggerHub/1.0.1",
  "tags": [
    {
      "name": "user",
      "description": "User related endpoints"
    },
    {
      "name": "comment",
      "description": "Handling posts and comments"
    },
    {
      "name": "vote",
      "description": "Handling up and down votes"
    },
    {
      "name": "register",
      "description": "Handling up and down votes"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/vote": {
      "get": {
        "tags": [
          "vote"
        ],
        "summary": "get single comment",
        "description": "Returns single comment based on the id passed as paramater\n",
        "operationId": "rootId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "commentId",
            "description": "Id of the comment to return votes",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommentId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "401": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/vote/{commentId}/{direction}": {
      "post": {
        "tags": [
          "vote"
        ],
        "summary": "Create new comment",
        "description": "creates new comment in the database",
        "operationId": "voteComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "pass a comment id to vote on",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "pass a direction either up for upvoting or down for downvoting",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "401": {
            "description": "invalid input"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "get single comment",
        "description": "Returns one comment object based on the id passed as paramater\n",
        "operationId": "getCommentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "pass a root id to get all comments to a post",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "401": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/comments/root/{rootId}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "list of users registered",
        "description": "get a list of all comments posted/stored in the database when token provided is valid token and optional search and filters by rootid\n",
        "operationId": "getCommentsByRootId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rootId",
            "in": "path",
            "description": "pass a root id to get all comments to a post",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "401": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/comment": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "list of comments posted",
        "description": "get a list of all comments stored in the database when token provided is valid and optional search and filters\n",
        "operationId": "getComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "pass a search string for looking up posts",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "422": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Create new comment",
        "description": "creates and save comment from the comment info such as tittle, user info, parentId, rootId",
        "operationId": "getUserFromToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "newComment",
            "description": "to create new comment",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "savedComment"
          },
          "401": {
            "description": "invalid input, object invalid"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "list of users registered",
        "description": "Get a list of all users in the database and u have to make sure that the token provide is right",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserReturn"
              }
            }
          },
          "500": {
            "description": "bad input/ internal error"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "user authetication",
        "description": "generate jwt token and sends it in the cookies",
        "operationId": "loginUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "loginView",
            "description": "output",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created"
          },
          "422": {
            "description": "invalid input"
          },
          "401": {
            "description": "user already exists"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create new user",
        "description": "Takes in user info and creates a new user in the database",
        "operationId": "post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "newUser",
            "description": "registering new user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account created and token sent to the cookies"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logout user",
        "description": "tokens are removed from the cookies",
        "operationId": "logoutUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logged out"
          }
        }
      }
    }
  },
  "definitions": {
    "CommentId": {
      "type": "object",
      "properties": {
        "commentId": {
          "type": "string",
          "format": "jwt:uuid",
          "example": "432b4d3c1f389ffb84a6d876"
        }
      }
    },
    "Vote": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "example": "Mystica"
        },
        "commentId": {
          "type": "string",
          "format": "jwt",
          "example": "432b4d3c1f389ffb84a6d876"
        },
        "direction": {
          "type": "integer",
          "format": "int53"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "example": "Nelsa"
        },
        "title": {
          "type": "string",
          "example": "My Post"
        },
        "body": {
          "type": "string",
          "example":"ready my post"
        },
        "parentId": {
          "type": "string",
          "format": "uuid"
        },
        "rootId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "UserReturn": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "Arsene"
        }
      }
    },
    "UserRegister": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example":"Maryse"
        },
        "email": {
          "type": "string",
          "example":"maryse@gmail.com"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}